package csprng

import (
	"bytes"
	"crypto/aes"
	"crypto/cipher"
	crand "crypto/rand"
	"math/rand"
	"testing"
)

func TestRand(t *testing.T) {
	buff := make([]byte, 100)
	r := NewCSPRNG()
	_, _ = r.Read(buff)
	t.Logf("%x", buff)
}

func TestRandomVsGo(t *testing.T) {
	buff1 := make([]byte, 1_000_000)
	buff2 := make([]byte, 1_000_000)
	keyIv := make([]byte, 32)
	r := NewCSPRNGWithKeyIV(keyIv)
	_, _ = r.Read(buff1)

	c, _ := aes.NewCipher(keyIv[:16])
	s := cipher.NewCTR(c, keyIv[16:])
	s.XORKeyStream(buff2, buff2)

	if bytes.Compare(buff1, buff2) != 0 {
		t.Errorf("random generated is not the same with the one generated by go, %x vs %x", buff1, buff2)
	}
}

func TestPerm(t *testing.T) {
	r := NewCSPRNG()
	buff := r.Perm(255)

	t.Logf("result: %v", buff)

	exist := map[byte]bool{}
	for i := 0; i < len(buff); i++ {
		if _, ok := exist[buff[i]]; ok {
			t.Errorf("duplicate value %v", buff[i])
		}
		exist[buff[i]] = true
	}
}

func BenchmarkRandHWSupport(b *testing.B) {
	buff := make([]byte, 1_000_000)
	r := NewCSPRNG()
	b.SetBytes(int64(len(buff)))
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, _ = r.Read(buff)
	}
}

func BenchmarkMathRand(b *testing.B) {
	buff := make([]byte, 1_000_000)
	b.SetBytes(int64(len(buff)))
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, _ = rand.Read(buff)
	}
}

func BenchmarkAESCTRRand(b *testing.B) {
	buff := make([]byte, 1_000_000)
	key := make([]byte, 16)
	iv := make([]byte, 16)
	c, _ := aes.NewCipher(key)
	s := cipher.NewCTR(c, iv)
	b.SetBytes(int64(len(buff)))
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		s.XORKeyStream(buff, buff)
	}
}

func BenchmarkCryptoRand(b *testing.B) {
	buff := make([]byte, 1_000_000)
	b.SetBytes(int64(len(buff)))
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, _ = crand.Read(buff)
	}
}

func BenchmarkPermHWSupport(b *testing.B) {
	r := NewCSPRNG()
	b.SetBytes(255)
	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		_ = r.Perm(255)
	}
}

func BenchmarkPermMathGo(b *testing.B) {
	b.SetBytes(255)
	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		_ = rand.Perm(255)
	}
}